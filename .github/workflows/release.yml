name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check_version.outputs.changed }}
      new_version: ${{ steps.check-version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Compare versions
        id: check_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          git checkout HEAD~1
          PREVIOUS_VERSION=$( [ -f package.json ] && node -p "require('./package.json').version" || echo "0.0.0" )
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  create-release:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          release_name: Release v${{ needs.check-version.outputs.new_version }}
          draft: false
          prerelease: false

  build:
    needs: check-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Build applications
        run: pnpm run electron:build --win

      - name: Upload macos artifact to Release
        if: needs.check-version.outputs.version_changed == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/Nezha-${{ needs.check-version.outputs.new_version }}.dmg
          asset_name: Nezha_${{ needs.check-version.outputs.new_version }}.dmg
          asset_content_type: application/octet-stream

      - name: Upload windows artifact to Release
        if: needs.check-version.outputs.version_changed == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/Nezha Setup ${{ needs.check-version.outputs.new_version }}.exe
          asset_name: Nezha Setup ${{ needs.check-version.outputs.new_version }}.exe
          asset_content_type: application/octet-stream
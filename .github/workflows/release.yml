name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check.outputs.changed }}
      new_version: ${{ steps.check.outputs.new_version }}
      old_version: ${{ steps.check.outputs.old_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: actions/setup-node@v4
        with:
          node-version: '16'

      - id: check
        run: |
          CURRENT=$(node -p "require('./package.json').version")
          git checkout HEAD~1 &> /dev/null || true
          PREVIOUS=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          echo "current=$CURRENT"
          echo "previous=$PREVIOUS"
          echo "changed=$([ "$CURRENT" != "$PREVIOUS" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "new_version=$CURRENT" >> $GITHUB_OUTPUT
          echo "old_version=$PREVIOUS" >> $GITHUB_OUTPUT

  release:
    needs: check-version
    if: needs.check-version.outputs.changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - id: create
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          release_name: Release v${{ needs.check-version.outputs.new_version }}
          draft: false
          prerelease: false

  build-app:
    needs: [check-version, release]
    if: needs.check-version.outputs.changed == 'true'
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '16'

      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true

      - name: Build App
        run: pnpm run electron:build

      - name: Upload Artifact
        uses: actions/upload-release-asset@v1
        if: matrix.os == 'windows-latest' || matrix.os == 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./release/${{ needs.check-version.outputs.new_version }}/Nezha_${{ needs.check-version.outputs.new_version }}.${{ matrix.os == 'windows-latest' && 'exe' || 'dmg' }}
          asset_name: Nezha_${{ needs.check-version.outputs.new_version }}_${{ matrix.os == 'windows-latest' && 'windows.exe' || 'macos.dmg' }}
          asset_content_type: application/octet-stream

  build-asar:
    needs: [check-version, release]
    if: needs.check-version.outputs.changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '16'

      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: true

      - name: Install asar
        run: pnpm add -g asar

      - name: Build ASAR
        run: |
          pnpm run build
          asar pack dist-electron app.asar

      - name: Upload ASAR
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./app.asar
          asset_name: Nezha_${{ needs.check-version.outputs.new_version }}.asar
          asset_content_type: application/octet-stream

name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

permissions:
  contents: write

jobs:
  check-version-bump:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check_version.outputs.changed }}
      new_version: ${{ steps.check_version.outputs.new_version }}
      old_version: ${{ steps.check_version.outputs.old_version }}
    steps:
      - name: Checkout current code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get previous version
        id: previous_version
        run: |
          git checkout HEAD~1
          if [ -f package.json ]; then
            VERSION=$(node -p "require('./package.json').version")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "version=0.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Check if version changed
        id: check_version
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.version }}
          PREVIOUS_VERSION=${{ steps.previous_version.outputs.version }}
          
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "old_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  create-release:
    needs: check-version-bump
    if: needs.check-version-bump.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version-bump.outputs.new_version }}
          release_name: Release v${{ needs.check-version-bump.outputs.new_version }}
          draft: false
          prerelease: false

  build:
    needs: [check-version-bump, create-release]
    if: needs.check-version-bump.outputs.version_changed == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm run electron:build

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/${{ needs.check-version-bump.outputs.new_version }}/Nezha_${{ needs.check-version-bump.outputs.new_version }}.exe
          asset_name: Nezha_${{ needs.check-version-bump.outputs.new_version }}_windows.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/${{ needs.check-version-bump.outputs.new_version }}/Nezha_${{ needs.check-version-bump.outputs.new_version }}.dmg
          asset_name: Nezha_${{ needs.check-version-bump.outputs.new_version }}_macos.dmg
          asset_content_type: application/octet-stream

  build-asar:
    needs: [check-version-bump, create-release]
    if: needs.check-version-bump.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Install asar
        run: pnpm add -g asar

      - name: Build and package ASAR
        run: |
          pnpm run build
          asar pack dist-electron app.asar

      - name: Upload ASAR artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./app.asar
          asset_name: Nezha_${{ needs.check-version-bump.outputs.new_version }}.asar
          asset_content_type: application/octet-stream